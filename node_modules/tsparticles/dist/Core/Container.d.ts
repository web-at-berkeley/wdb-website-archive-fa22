import { Canvas } from "./Canvas";
import type { IRepulse } from "./Interfaces/IRepulse";
import type { IBubble } from "./Interfaces/IBubble";
import type { IContainerInteractivity } from "./Interfaces/IContainerInteractivity";
import { Particles } from "./Particles";
import { Retina } from "./Retina";
import type { IOptions } from "../Options/Interfaces/IOptions";
import { FrameManager } from "./FrameManager";
import type { RecursivePartial } from "../Types/RecursivePartial";
import { Options } from "../Options/Classes/Options";
import type { IContainerPlugin } from "./Interfaces/IContainerPlugin";
import type { IShapeDrawer } from "./Interfaces/IShapeDrawer";
import { SimplexNoise } from "../Utils/SimplexNoise";
export declare class Container {
    readonly sourceOptions?: RecursivePartial<IOptions>;
    readonly id: string;
    interactivity: IContainerInteractivity;
    options: Options;
    retina: Retina;
    canvas: Canvas;
    simplex: SimplexNoise;
    drawers: {
        [type: string]: IShapeDrawer;
    };
    particles: Particles;
    plugins: {
        [id: string]: IContainerPlugin;
    };
    bubble: IBubble;
    repulse: IRepulse;
    lastFrameTime: number;
    pageHidden: boolean;
    drawer: FrameManager;
    started: boolean;
    destroyed: boolean;
    density: number;
    private paused;
    private drawAnimationFrame?;
    private eventListeners;
    constructor(id: string, params?: RecursivePartial<IOptions>, ...presets: string[]);
    static requestFrame(callback: FrameRequestCallback): number;
    static cancelAnimation(handle: number): void;
    play(force?: boolean): void;
    pause(): void;
    draw(): void;
    getAnimationStatus(): boolean;
    densityAutoParticles(): void;
    initDensityFactor(): void;
    destroy(): void;
    exportImg(callback: BlobCallback): void;
    exportImage(callback: BlobCallback, type?: string, quality?: number): void;
    exportConfiguration(): string;
    refresh(): Promise<void>;
    stop(): void;
    start(): Promise<void>;
    private init;
}
