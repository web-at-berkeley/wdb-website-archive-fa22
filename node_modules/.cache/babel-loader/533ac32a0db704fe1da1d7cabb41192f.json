{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Retina = function () {\n  function Retina(container) {\n    this.container = container;\n    this.isRetina = false;\n    this.bubbleModeDistance = 0;\n    this.bubbleModeSize = 0;\n    this.connectModeDistance = 0;\n    this.connectModeRadius = 0;\n    this.grabModeDistance = 0;\n    this.repulseModeDistance = 0;\n    this.slowModeRadius = 0;\n    this.lineLinkedDistance = 0;\n    this.lineLinkedWidth = 0;\n    this.moveSpeed = 0;\n    this.sizeValue = 0;\n    this.sizeAnimationSpeed = 0;\n    this.polygonMaskMoveRadius = 0;\n    this.pixelRatio = 1;\n  }\n\n  Retina.prototype.init = function () {\n    var _a;\n\n    var container = this.container;\n    var options = container.options;\n\n    if (options.detectRetina && window.devicePixelRatio > 1) {\n      this.pixelRatio = window.devicePixelRatio;\n      this.isRetina = true;\n    } else {\n      this.pixelRatio = 1;\n      this.isRetina = false;\n    }\n\n    var ratio = this.pixelRatio;\n\n    if (container.canvas.element) {\n      var element = container.canvas.element;\n      container.canvas.size.width = element.offsetWidth * ratio;\n      container.canvas.size.height = element.offsetHeight * ratio;\n    }\n\n    var particles = options.particles;\n    this.lineLinkedDistance = particles.lineLinked.distance * ratio;\n    this.lineLinkedWidth = particles.lineLinked.width * ratio;\n    this.moveSpeed = particles.move.speed * ratio;\n    this.sizeValue = particles.size.value * ratio;\n    this.sizeAnimationSpeed = particles.size.animation.speed * ratio;\n    var interactivity = options.interactivity;\n    this.connectModeDistance = interactivity.modes.connect.distance * ratio;\n    this.connectModeRadius = interactivity.modes.connect.radius * ratio;\n    this.grabModeDistance = interactivity.modes.grab.distance * ratio;\n    this.repulseModeDistance = interactivity.modes.repulse.distance * ratio;\n    this.slowModeRadius = interactivity.modes.slow.radius * ratio;\n    this.bubbleModeDistance = interactivity.modes.bubble.distance * ratio;\n    this.bubbleModeSize = (_a = interactivity.modes.bubble.size) !== null && _a !== void 0 ? _a : this.sizeValue * ratio;\n    this.polygonMaskMoveRadius = options.polygon.move.radius * ratio;\n  };\n\n  Retina.prototype.initParticle = function (particle) {\n    var particlesOptions = particle.particlesOptions;\n    var ratio = this.pixelRatio;\n    particle.lineLinkedDistance = particlesOptions.lineLinked.distance * ratio;\n    particle.lineLinkedWidth = particlesOptions.lineLinked.width * ratio;\n    particle.moveSpeed = particlesOptions.move.speed * ratio;\n    particle.sizeValue = particlesOptions.size.value * ratio;\n\n    if (typeof particlesOptions.size.random !== \"boolean\") {\n      particle.randomMinimumSize = particlesOptions.size.random.minimumValue;\n    }\n\n    particle.sizeAnimationSpeed = particlesOptions.size.animation.speed * ratio;\n  };\n\n  Retina.prototype.reset = function () {};\n\n  return Retina;\n}();\n\nexports.Retina = Retina;","map":{"version":3,"sources":["/Users/samarthgoel/Desktop/web-dev-website/node_modules/tsparticles/dist/Core/Retina.js"],"names":["Object","defineProperty","exports","value","Retina","container","isRetina","bubbleModeDistance","bubbleModeSize","connectModeDistance","connectModeRadius","grabModeDistance","repulseModeDistance","slowModeRadius","lineLinkedDistance","lineLinkedWidth","moveSpeed","sizeValue","sizeAnimationSpeed","polygonMaskMoveRadius","pixelRatio","prototype","init","_a","options","detectRetina","window","devicePixelRatio","ratio","canvas","element","size","width","offsetWidth","height","offsetHeight","particles","lineLinked","distance","move","speed","animation","interactivity","modes","connect","radius","grab","repulse","slow","bubble","polygon","initParticle","particle","particlesOptions","random","randomMinimumSize","minimumValue","reset"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Retina = (function () {\n    function Retina(container) {\n        this.container = container;\n        this.isRetina = false;\n        this.bubbleModeDistance = 0;\n        this.bubbleModeSize = 0;\n        this.connectModeDistance = 0;\n        this.connectModeRadius = 0;\n        this.grabModeDistance = 0;\n        this.repulseModeDistance = 0;\n        this.slowModeRadius = 0;\n        this.lineLinkedDistance = 0;\n        this.lineLinkedWidth = 0;\n        this.moveSpeed = 0;\n        this.sizeValue = 0;\n        this.sizeAnimationSpeed = 0;\n        this.polygonMaskMoveRadius = 0;\n        this.pixelRatio = 1;\n    }\n    Retina.prototype.init = function () {\n        var _a;\n        var container = this.container;\n        var options = container.options;\n        if (options.detectRetina && window.devicePixelRatio > 1) {\n            this.pixelRatio = window.devicePixelRatio;\n            this.isRetina = true;\n        }\n        else {\n            this.pixelRatio = 1;\n            this.isRetina = false;\n        }\n        var ratio = this.pixelRatio;\n        if (container.canvas.element) {\n            var element = container.canvas.element;\n            container.canvas.size.width = element.offsetWidth * ratio;\n            container.canvas.size.height = element.offsetHeight * ratio;\n        }\n        var particles = options.particles;\n        this.lineLinkedDistance = particles.lineLinked.distance * ratio;\n        this.lineLinkedWidth = particles.lineLinked.width * ratio;\n        this.moveSpeed = particles.move.speed * ratio;\n        this.sizeValue = particles.size.value * ratio;\n        this.sizeAnimationSpeed = particles.size.animation.speed * ratio;\n        var interactivity = options.interactivity;\n        this.connectModeDistance = interactivity.modes.connect.distance * ratio;\n        this.connectModeRadius = interactivity.modes.connect.radius * ratio;\n        this.grabModeDistance = interactivity.modes.grab.distance * ratio;\n        this.repulseModeDistance = interactivity.modes.repulse.distance * ratio;\n        this.slowModeRadius = interactivity.modes.slow.radius * ratio;\n        this.bubbleModeDistance = interactivity.modes.bubble.distance * ratio;\n        this.bubbleModeSize = (_a = interactivity.modes.bubble.size) !== null && _a !== void 0 ? _a : this.sizeValue * ratio;\n        this.polygonMaskMoveRadius = options.polygon.move.radius * ratio;\n    };\n    Retina.prototype.initParticle = function (particle) {\n        var particlesOptions = particle.particlesOptions;\n        var ratio = this.pixelRatio;\n        particle.lineLinkedDistance = particlesOptions.lineLinked.distance * ratio;\n        particle.lineLinkedWidth = particlesOptions.lineLinked.width * ratio;\n        particle.moveSpeed = particlesOptions.move.speed * ratio;\n        particle.sizeValue = particlesOptions.size.value * ratio;\n        if (typeof particlesOptions.size.random !== \"boolean\") {\n            particle.randomMinimumSize = particlesOptions.size.random.minimumValue;\n        }\n        particle.sizeAnimationSpeed = particlesOptions.size.animation.speed * ratio;\n    };\n    Retina.prototype.reset = function () {\n    };\n    return Retina;\n}());\nexports.Retina = Retina;\n"]},"metadata":{},"sourceType":"script"}