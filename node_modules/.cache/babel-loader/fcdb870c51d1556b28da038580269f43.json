{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Circle_1 = require(\"../../../../Utils/Circle\");\n\nvar Connector = function () {\n  function Connector() {}\n\n  Connector.connect = function (container, _delta) {\n    var options = container.options;\n\n    if (options.interactivity.events.onHover.enable && container.interactivity.status == 'mousemove') {\n      var mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var distance = Math.abs(container.retina.connectModeRadius);\n      var query = container.particles.quadTree.query(new Circle_1.Circle(mousePos.x, mousePos.y, distance));\n      var i = 0;\n\n      for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n        var p1 = query_1[_i];\n        var pos1 = p1.getPosition();\n\n        for (var _a = 0, _b = query.slice(i + 1); _a < _b.length; _a++) {\n          var p2 = _b[_a];\n          var pos2 = p2.getPosition();\n          var distMax = Math.abs(container.retina.connectModeDistance);\n          var xDiff = Math.abs(pos1.x - pos2.x);\n          var yDiff = Math.abs(pos1.y - pos2.y);\n\n          if (xDiff < distMax && yDiff < distMax) {\n            container.canvas.drawConnectLine(p1, p2);\n          }\n        }\n\n        ++i;\n      }\n    }\n  };\n\n  return Connector;\n}();\n\nexports.Connector = Connector;","map":{"version":3,"sources":["/Users/samarthgoel/Desktop/web-dev-website/node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Connector.js"],"names":["Object","defineProperty","exports","value","Circle_1","require","Connector","connect","container","_delta","options","interactivity","events","onHover","enable","status","mousePos","mouse","position","distance","Math","abs","retina","connectModeRadius","query","particles","quadTree","Circle","x","y","i","_i","query_1","length","p1","pos1","getPosition","_a","_b","slice","p2","pos2","distMax","connectModeDistance","xDiff","yDiff","canvas","drawConnectLine"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAtB;;AACA,IAAIC,SAAS,GAAI,YAAY;AACzB,WAASA,SAAT,GAAqB,CACpB;;AACDA,EAAAA,SAAS,CAACC,OAAV,GAAoB,UAAUC,SAAV,EAAqBC,MAArB,EAA6B;AAC7C,QAAIC,OAAO,GAAGF,SAAS,CAACE,OAAxB;;AACA,QAAIA,OAAO,CAACC,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,MAArC,IAA+CN,SAAS,CAACG,aAAV,CAAwBI,MAAxB,IAAkC,WAArF,EAAkG;AAC9F,UAAIC,QAAQ,GAAGR,SAAS,CAACG,aAAV,CAAwBM,KAAxB,CAA8BC,QAA7C;;AACA,UAAI,CAACF,QAAL,EAAe;AACX;AACH;;AACD,UAAIG,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASb,SAAS,CAACc,MAAV,CAAiBC,iBAA1B,CAAf;AACA,UAAIC,KAAK,GAAGhB,SAAS,CAACiB,SAAV,CAAoBC,QAApB,CAA6BF,KAA7B,CAAmC,IAAIpB,QAAQ,CAACuB,MAAb,CAAoBX,QAAQ,CAACY,CAA7B,EAAgCZ,QAAQ,CAACa,CAAzC,EAA4CV,QAA5C,CAAnC,CAAZ;AACA,UAAIW,CAAC,GAAG,CAAR;;AACA,WAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,OAAO,GAAGR,KAA3B,EAAkCO,EAAE,GAAGC,OAAO,CAACC,MAA/C,EAAuDF,EAAE,EAAzD,EAA6D;AACzD,YAAIG,EAAE,GAAGF,OAAO,CAACD,EAAD,CAAhB;AACA,YAAII,IAAI,GAAGD,EAAE,CAACE,WAAH,EAAX;;AACA,aAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGd,KAAK,CAACe,KAAN,CAAYT,CAAC,GAAG,CAAhB,CAAtB,EAA0CO,EAAE,GAAGC,EAAE,CAACL,MAAlD,EAA0DI,EAAE,EAA5D,EAAgE;AAC5D,cAAIG,EAAE,GAAGF,EAAE,CAACD,EAAD,CAAX;AACA,cAAII,IAAI,GAAGD,EAAE,CAACJ,WAAH,EAAX;AACA,cAAIM,OAAO,GAAGtB,IAAI,CAACC,GAAL,CAASb,SAAS,CAACc,MAAV,CAAiBqB,mBAA1B,CAAd;AACA,cAAIC,KAAK,GAAGxB,IAAI,CAACC,GAAL,CAASc,IAAI,CAACP,CAAL,GAASa,IAAI,CAACb,CAAvB,CAAZ;AACA,cAAIiB,KAAK,GAAGzB,IAAI,CAACC,GAAL,CAASc,IAAI,CAACN,CAAL,GAASY,IAAI,CAACZ,CAAvB,CAAZ;;AACA,cAAIe,KAAK,GAAGF,OAAR,IAAmBG,KAAK,GAAGH,OAA/B,EAAwC;AACpClC,YAAAA,SAAS,CAACsC,MAAV,CAAiBC,eAAjB,CAAiCb,EAAjC,EAAqCM,EAArC;AACH;AACJ;;AACD,UAAEV,CAAF;AACH;AACJ;AACJ,GA1BD;;AA2BA,SAAOxB,SAAP;AACH,CA/BgB,EAAjB;;AAgCAJ,OAAO,CAACI,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Circle_1 = require(\"../../../../Utils/Circle\");\nvar Connector = (function () {\n    function Connector() {\n    }\n    Connector.connect = function (container, _delta) {\n        var options = container.options;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status == 'mousemove') {\n            var mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            var distance = Math.abs(container.retina.connectModeRadius);\n            var query = container.particles.quadTree.query(new Circle_1.Circle(mousePos.x, mousePos.y, distance));\n            var i = 0;\n            for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n                var p1 = query_1[_i];\n                var pos1 = p1.getPosition();\n                for (var _a = 0, _b = query.slice(i + 1); _a < _b.length; _a++) {\n                    var p2 = _b[_a];\n                    var pos2 = p2.getPosition();\n                    var distMax = Math.abs(container.retina.connectModeDistance);\n                    var xDiff = Math.abs(pos1.x - pos2.x);\n                    var yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        container.canvas.drawConnectLine(p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    };\n    return Connector;\n}());\nexports.Connector = Connector;\n"]},"metadata":{},"sourceType":"script"}