{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Constants_1 = require(\"../../../../Utils/Constants\");\n\nvar Utils_1 = require(\"../../../../Utils/Utils\");\n\nvar Circle_1 = require(\"../../../../Utils/Circle\");\n\nvar Grabber = function () {\n  function Grabber() {}\n\n  Grabber.grab = function (container, _delta) {\n    var options = container.options;\n    var interactivity = options.interactivity;\n\n    if (interactivity.events.onHover.enable && container.interactivity.status === Constants_1.Constants.mouseMoveEvent) {\n      var mousePos = container.interactivity.mouse.position;\n\n      if (mousePos === undefined) {\n        return;\n      }\n\n      var distance = container.retina.grabModeDistance;\n      var query = container.particles.quadTree.query(new Circle_1.Circle(mousePos.x, mousePos.y, distance));\n\n      for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n        var particle = query_1[_i];\n        var pos = particle.getPosition();\n        var distance_1 = Utils_1.Utils.getDistance(pos, mousePos);\n\n        if (distance_1 <= container.retina.grabModeDistance) {\n          var lineOpacity = interactivity.modes.grab.lineLinked.opacity;\n          var grabDistance = container.retina.grabModeDistance;\n          var opacityLine = lineOpacity - distance_1 * lineOpacity / grabDistance;\n\n          if (opacityLine > 0) {\n            container.canvas.drawGrabLine(particle, opacityLine, mousePos);\n          }\n        }\n      }\n    }\n  };\n\n  return Grabber;\n}();\n\nexports.Grabber = Grabber;","map":{"version":3,"sources":["/Users/samarthgoel/Desktop/web-dev-website/node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Grabber.js"],"names":["Object","defineProperty","exports","value","Constants_1","require","Utils_1","Circle_1","Grabber","grab","container","_delta","options","interactivity","events","onHover","enable","status","Constants","mouseMoveEvent","mousePos","mouse","position","undefined","distance","retina","grabModeDistance","query","particles","quadTree","Circle","x","y","_i","query_1","length","particle","pos","getPosition","distance_1","Utils","getDistance","lineOpacity","modes","lineLinked","opacity","grabDistance","opacityLine","canvas","drawGrabLine"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,WAAW,GAAGC,OAAO,CAAC,6BAAD,CAAzB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,0BAAD,CAAtB;;AACA,IAAIG,OAAO,GAAI,YAAY;AACvB,WAASA,OAAT,GAAmB,CAClB;;AACDA,EAAAA,OAAO,CAACC,IAAR,GAAe,UAAUC,SAAV,EAAqBC,MAArB,EAA6B;AACxC,QAAIC,OAAO,GAAGF,SAAS,CAACE,OAAxB;AACA,QAAIC,aAAa,GAAGD,OAAO,CAACC,aAA5B;;AACA,QAAIA,aAAa,CAACC,MAAd,CAAqBC,OAArB,CAA6BC,MAA7B,IAAuCN,SAAS,CAACG,aAAV,CAAwBI,MAAxB,KAAmCb,WAAW,CAACc,SAAZ,CAAsBC,cAApG,EAAoH;AAChH,UAAIC,QAAQ,GAAGV,SAAS,CAACG,aAAV,CAAwBQ,KAAxB,CAA8BC,QAA7C;;AACA,UAAIF,QAAQ,KAAKG,SAAjB,EAA4B;AACxB;AACH;;AACD,UAAIC,QAAQ,GAAGd,SAAS,CAACe,MAAV,CAAiBC,gBAAhC;AACA,UAAIC,KAAK,GAAGjB,SAAS,CAACkB,SAAV,CAAoBC,QAApB,CAA6BF,KAA7B,CAAmC,IAAIpB,QAAQ,CAACuB,MAAb,CAAoBV,QAAQ,CAACW,CAA7B,EAAgCX,QAAQ,CAACY,CAAzC,EAA4CR,QAA5C,CAAnC,CAAZ;;AACA,WAAK,IAAIS,EAAE,GAAG,CAAT,EAAYC,OAAO,GAAGP,KAA3B,EAAkCM,EAAE,GAAGC,OAAO,CAACC,MAA/C,EAAuDF,EAAE,EAAzD,EAA6D;AACzD,YAAIG,QAAQ,GAAGF,OAAO,CAACD,EAAD,CAAtB;AACA,YAAII,GAAG,GAAGD,QAAQ,CAACE,WAAT,EAAV;AACA,YAAIC,UAAU,GAAGjC,OAAO,CAACkC,KAAR,CAAcC,WAAd,CAA0BJ,GAA1B,EAA+BjB,QAA/B,CAAjB;;AACA,YAAImB,UAAU,IAAI7B,SAAS,CAACe,MAAV,CAAiBC,gBAAnC,EAAqD;AACjD,cAAIgB,WAAW,GAAG7B,aAAa,CAAC8B,KAAd,CAAoBlC,IAApB,CAAyBmC,UAAzB,CAAoCC,OAAtD;AACA,cAAIC,YAAY,GAAGpC,SAAS,CAACe,MAAV,CAAiBC,gBAApC;AACA,cAAIqB,WAAW,GAAGL,WAAW,GAAIH,UAAU,GAAGG,WAAd,GAA6BI,YAA7D;;AACA,cAAIC,WAAW,GAAG,CAAlB,EAAqB;AACjBrC,YAAAA,SAAS,CAACsC,MAAV,CAAiBC,YAAjB,CAA8Bb,QAA9B,EAAwCW,WAAxC,EAAqD3B,QAArD;AACH;AACJ;AACJ;AACJ;AACJ,GAxBD;;AAyBA,SAAOZ,OAAP;AACH,CA7Bc,EAAf;;AA8BAN,OAAO,CAACM,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Constants_1 = require(\"../../../../Utils/Constants\");\nvar Utils_1 = require(\"../../../../Utils/Utils\");\nvar Circle_1 = require(\"../../../../Utils/Circle\");\nvar Grabber = (function () {\n    function Grabber() {\n    }\n    Grabber.grab = function (container, _delta) {\n        var options = container.options;\n        var interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Constants_1.Constants.mouseMoveEvent) {\n            var mousePos = container.interactivity.mouse.position;\n            if (mousePos === undefined) {\n                return;\n            }\n            var distance = container.retina.grabModeDistance;\n            var query = container.particles.quadTree.query(new Circle_1.Circle(mousePos.x, mousePos.y, distance));\n            for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n                var particle = query_1[_i];\n                var pos = particle.getPosition();\n                var distance_1 = Utils_1.Utils.getDistance(pos, mousePos);\n                if (distance_1 <= container.retina.grabModeDistance) {\n                    var lineOpacity = interactivity.modes.grab.lineLinked.opacity;\n                    var grabDistance = container.retina.grabModeDistance;\n                    var opacityLine = lineOpacity - (distance_1 * lineOpacity) / grabDistance;\n                    if (opacityLine > 0) {\n                        container.canvas.drawGrabLine(particle, opacityLine, mousePos);\n                    }\n                }\n            }\n        }\n    };\n    return Grabber;\n}());\nexports.Grabber = Grabber;\n"]},"metadata":{},"sourceType":"script"}