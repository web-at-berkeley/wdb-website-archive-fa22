{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ProcessBubbleType_1 = require(\"../../../../Enums/ProcessBubbleType\");\n\nvar Utils_1 = require(\"../../../../Utils/Utils\");\n\nvar HoverMode_1 = require(\"../../../../Enums/Modes/HoverMode\");\n\nvar ClickMode_1 = require(\"../../../../Enums/Modes/ClickMode\");\n\nvar Constants_1 = require(\"../../../../Utils/Constants\");\n\nvar ColorUtils_1 = require(\"../../../../Utils/ColorUtils\");\n\nvar Circle_1 = require(\"../../../../Utils/Circle\");\n\nvar Bubbler = function () {\n  function Bubbler() {}\n\n  Bubbler.reset = function (particle) {\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  };\n\n  Bubbler.bubble = function (container, _delta) {\n    var options = container.options;\n    var events = options.interactivity.events;\n    var onHover = events.onHover;\n    var onClick = events.onClick;\n    var hoverEnabled = onHover.enable;\n    var hoverMode = onHover.mode;\n    var clickEnabled = onClick.enable;\n    var clickMode = onClick.mode;\n\n    if (hoverEnabled && Utils_1.Utils.isInArray(HoverMode_1.HoverMode.bubble, hoverMode)) {\n      this.hoverBubble(container);\n    } else if (clickEnabled && Utils_1.Utils.isInArray(ClickMode_1.ClickMode.bubble, clickMode)) {\n      this.clickBubble(container);\n    }\n  };\n\n  Bubbler.process = function (container, particle, distMouse, timeSpent, data) {\n    var bubbleParam = data.bubbleObj.optValue;\n\n    if (bubbleParam === undefined) {\n      return;\n    }\n\n    var options = container.options;\n    var bubbleDuration = options.interactivity.modes.bubble.duration;\n    var bubbleDistance = container.retina.bubbleModeDistance;\n    var particlesParam = data.particlesObj.optValue;\n    var pObjBubble = data.bubbleObj.value;\n    var pObj = data.particlesObj.value || 0;\n    var type = data.type;\n\n    if (bubbleParam !== particlesParam) {\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= bubbleDistance) {\n          var obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n          if (obj !== bubbleParam) {\n            var value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n            if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n              particle.bubble.radius = value;\n            }\n\n            if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n              particle.bubble.opacity = value;\n            }\n          }\n        } else {\n          if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n            delete particle.bubble.radius;\n          }\n\n          if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n            delete particle.bubble.opacity;\n          }\n        }\n      } else if (pObjBubble) {\n        if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n          delete particle.bubble.radius;\n        }\n\n        if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n          delete particle.bubble.opacity;\n        }\n      }\n    }\n  };\n\n  Bubbler.clickBubble = function (container) {\n    var _a;\n\n    var options = container.options;\n    var mouseClickPos = container.interactivity.mouse.clickPosition;\n\n    if (mouseClickPos === undefined) {\n      return;\n    }\n\n    var distance = container.retina.bubbleModeDistance;\n    var query = container.particles.quadTree.query(new Circle_1.Circle(mouseClickPos.x, mouseClickPos.y, distance));\n\n    for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n      var particle = query_1[_i];\n      var pos = particle.getPosition();\n      var distMouse = Utils_1.Utils.getDistance(pos, mouseClickPos);\n      var timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (container.bubble.clicking) {\n        if (timeSpent > options.interactivity.modes.bubble.duration) {\n          container.bubble.durationEnd = true;\n        }\n\n        if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n          container.bubble.clicking = false;\n          container.bubble.durationEnd = false;\n        }\n\n        var sizeData = {\n          bubbleObj: {\n            optValue: container.retina.bubbleModeSize,\n            value: particle.bubble.radius\n          },\n          particlesObj: {\n            optValue: (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue,\n            value: particle.size.value\n          },\n          type: ProcessBubbleType_1.ProcessBubbleType.size\n        };\n        this.process(container, particle, distMouse, timeSpent, sizeData);\n        var opacityData = {\n          bubbleObj: {\n            optValue: options.interactivity.modes.bubble.opacity,\n            value: particle.bubble.opacity\n          },\n          particlesObj: {\n            optValue: particle.particlesOptions.opacity.value,\n            value: particle.opacity.value\n          },\n          type: ProcessBubbleType_1.ProcessBubbleType.opacity\n        };\n        this.process(container, particle, distMouse, timeSpent, opacityData);\n\n        if (!container.bubble.durationEnd) {\n          if (distMouse <= container.retina.bubbleModeDistance) {\n            this.hoverBubbleColor(container, particle);\n          } else {\n            delete particle.bubble.color;\n          }\n        } else {\n          delete particle.bubble.color;\n        }\n      }\n    }\n  };\n\n  Bubbler.hoverBubble = function (container) {\n    var mousePos = container.interactivity.mouse.position;\n\n    if (mousePos === undefined) {\n      return;\n    }\n\n    var distance = container.retina.bubbleModeDistance;\n    var query = container.particles.quadTree.query(new Circle_1.Circle(mousePos.x, mousePos.y, distance));\n\n    for (var _i = 0, query_2 = query; _i < query_2.length; _i++) {\n      var particle = query_2[_i];\n      var pos = particle.getPosition();\n      var distance_1 = Utils_1.Utils.getDistance(pos, mousePos);\n      var ratio = 1 - distance_1 / container.retina.bubbleModeDistance;\n\n      if (distance_1 <= container.retina.bubbleModeDistance) {\n        if (ratio >= 0 && container.interactivity.status === Constants_1.Constants.mouseMoveEvent) {\n          this.hoverBubbleSize(container, particle, ratio);\n          this.hoverBubbleOpacity(container, particle, ratio);\n          this.hoverBubbleColor(container, particle);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === Constants_1.Constants.mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  };\n\n  Bubbler.hoverBubbleSize = function (container, particle, ratio) {\n    var _a;\n\n    var modeSize = container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    var optSize = (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue;\n    var pSize = particle.size.value;\n    var size = this.calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  };\n\n  Bubbler.hoverBubbleOpacity = function (container, particle, ratio) {\n    var options = container.options;\n    var modeOpacity = options.interactivity.modes.bubble.opacity;\n\n    if (modeOpacity === undefined) {\n      return;\n    }\n\n    var optOpacity = particle.particlesOptions.opacity.value;\n    var pOpacity = particle.opacity.value;\n    var opacity = this.calculateBubbleValue(pOpacity, modeOpacity, optOpacity, ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  };\n\n  Bubbler.calculateBubbleValue = function (particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue > optionsValue) {\n      var size = particleValue + (modeValue - optionsValue) * ratio;\n      return Utils_1.Utils.clamp(size, particleValue, modeValue);\n    } else if (modeValue < optionsValue) {\n      var size = particleValue - (optionsValue - modeValue) * ratio;\n      return Utils_1.Utils.clamp(size, modeValue, particleValue);\n    }\n  };\n\n  Bubbler.hoverBubbleColor = function (container, particle) {\n    var options = container.options;\n\n    if (particle.bubble.color === undefined) {\n      var modeColor = options.interactivity.modes.bubble.color;\n\n      if (modeColor === undefined) {\n        return;\n      }\n\n      particle.bubble.color = ColorUtils_1.ColorUtils.colorToRgb(modeColor instanceof Array ? Utils_1.Utils.itemFromArray(modeColor) : modeColor);\n    }\n  };\n\n  return Bubbler;\n}();\n\nexports.Bubbler = Bubbler;","map":{"version":3,"sources":["/Users/samarthgoel/Desktop/web-dev-website/node_modules/tsparticles/dist/Core/Particle/Interactions/Mouse/Bubbler.js"],"names":["Object","defineProperty","exports","value","ProcessBubbleType_1","require","Utils_1","HoverMode_1","ClickMode_1","Constants_1","ColorUtils_1","Circle_1","Bubbler","reset","particle","bubble","opacity","radius","color","container","_delta","options","events","interactivity","onHover","onClick","hoverEnabled","enable","hoverMode","mode","clickEnabled","clickMode","Utils","isInArray","HoverMode","hoverBubble","ClickMode","clickBubble","process","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","modes","duration","bubbleDistance","retina","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","type","durationEnd","obj","ProcessBubbleType","size","_a","mouseClickPos","mouse","clickPosition","distance","query","particles","quadTree","Circle","x","y","_i","query_1","length","pos","getPosition","getDistance","Date","getTime","clickTime","clicking","sizeData","bubbleModeSize","sizeValue","opacityData","particlesOptions","hoverBubbleColor","mousePos","position","query_2","distance_1","ratio","status","Constants","mouseMoveEvent","hoverBubbleSize","hoverBubbleOpacity","mouseLeaveEvent","modeSize","optSize","pSize","calculateBubbleValue","modeOpacity","optOpacity","pOpacity","particleValue","modeValue","optionsValue","clamp","modeColor","ColorUtils","colorToRgb","Array","itemFromArray"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ProcessBubbleType_1 = require(\"../../../../Enums/ProcessBubbleType\");\nvar Utils_1 = require(\"../../../../Utils/Utils\");\nvar HoverMode_1 = require(\"../../../../Enums/Modes/HoverMode\");\nvar ClickMode_1 = require(\"../../../../Enums/Modes/ClickMode\");\nvar Constants_1 = require(\"../../../../Utils/Constants\");\nvar ColorUtils_1 = require(\"../../../../Utils/ColorUtils\");\nvar Circle_1 = require(\"../../../../Utils/Circle\");\nvar Bubbler = (function () {\n    function Bubbler() {\n    }\n    Bubbler.reset = function (particle) {\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    };\n    Bubbler.bubble = function (container, _delta) {\n        var options = container.options;\n        var events = options.interactivity.events;\n        var onHover = events.onHover;\n        var onClick = events.onClick;\n        var hoverEnabled = onHover.enable;\n        var hoverMode = onHover.mode;\n        var clickEnabled = onClick.enable;\n        var clickMode = onClick.mode;\n        if (hoverEnabled && Utils_1.Utils.isInArray(HoverMode_1.HoverMode.bubble, hoverMode)) {\n            this.hoverBubble(container);\n        }\n        else if (clickEnabled && Utils_1.Utils.isInArray(ClickMode_1.ClickMode.bubble, clickMode)) {\n            this.clickBubble(container);\n        }\n    };\n    Bubbler.process = function (container, particle, distMouse, timeSpent, data) {\n        var bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        var options = container.options;\n        var bubbleDuration = options.interactivity.modes.bubble.duration;\n        var bubbleDistance = container.retina.bubbleModeDistance;\n        var particlesParam = data.particlesObj.optValue;\n        var pObjBubble = data.bubbleObj.value;\n        var pObj = data.particlesObj.value || 0;\n        var type = data.type;\n        if (bubbleParam !== particlesParam) {\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= bubbleDistance) {\n                    var obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                    if (obj !== bubbleParam) {\n                        var value = pObj - (timeSpent * (pObj - bubbleParam) / bubbleDuration);\n                        if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else if (pObjBubble) {\n                if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n                    delete particle.bubble.radius;\n                }\n                if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n    };\n    Bubbler.clickBubble = function (container) {\n        var _a;\n        var options = container.options;\n        var mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (mouseClickPos === undefined) {\n            return;\n        }\n        var distance = container.retina.bubbleModeDistance;\n        var query = container.particles.quadTree.query(new Circle_1.Circle(mouseClickPos.x, mouseClickPos.y, distance));\n        for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n            var particle = query_1[_i];\n            var pos = particle.getPosition();\n            var distMouse = Utils_1.Utils.getDistance(pos, mouseClickPos);\n            var timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (container.bubble.clicking) {\n                if (timeSpent > options.interactivity.modes.bubble.duration) {\n                    container.bubble.durationEnd = true;\n                }\n                if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                    container.bubble.clicking = false;\n                    container.bubble.durationEnd = false;\n                }\n                var sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue,\n                        value: particle.size.value,\n                    },\n                    type: ProcessBubbleType_1.ProcessBubbleType.size,\n                };\n                this.process(container, particle, distMouse, timeSpent, sizeData);\n                var opacityData = {\n                    bubbleObj: {\n                        optValue: options.interactivity.modes.bubble.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: particle.particlesOptions.opacity.value,\n                        value: particle.opacity.value,\n                    },\n                    type: ProcessBubbleType_1.ProcessBubbleType.opacity,\n                };\n                this.process(container, particle, distMouse, timeSpent, opacityData);\n                if (!container.bubble.durationEnd) {\n                    if (distMouse <= container.retina.bubbleModeDistance) {\n                        this.hoverBubbleColor(container, particle);\n                    }\n                    else {\n                        delete particle.bubble.color;\n                    }\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        }\n    };\n    Bubbler.hoverBubble = function (container) {\n        var mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        var distance = container.retina.bubbleModeDistance;\n        var query = container.particles.quadTree.query(new Circle_1.Circle(mousePos.x, mousePos.y, distance));\n        for (var _i = 0, query_2 = query; _i < query_2.length; _i++) {\n            var particle = query_2[_i];\n            var pos = particle.getPosition();\n            var distance_1 = Utils_1.Utils.getDistance(pos, mousePos);\n            var ratio = 1 - distance_1 / container.retina.bubbleModeDistance;\n            if (distance_1 <= container.retina.bubbleModeDistance) {\n                if (ratio >= 0 && container.interactivity.status === Constants_1.Constants.mouseMoveEvent) {\n                    this.hoverBubbleSize(container, particle, ratio);\n                    this.hoverBubbleOpacity(container, particle, ratio);\n                    this.hoverBubbleColor(container, particle);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === Constants_1.Constants.mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    };\n    Bubbler.hoverBubbleSize = function (container, particle, ratio) {\n        var _a;\n        var modeSize = container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        var optSize = (_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue;\n        var pSize = particle.size.value;\n        var size = this.calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    };\n    Bubbler.hoverBubbleOpacity = function (container, particle, ratio) {\n        var options = container.options;\n        var modeOpacity = options.interactivity.modes.bubble.opacity;\n        if (modeOpacity === undefined) {\n            return;\n        }\n        var optOpacity = particle.particlesOptions.opacity.value;\n        var pOpacity = particle.opacity.value;\n        var opacity = this.calculateBubbleValue(pOpacity, modeOpacity, optOpacity, ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    };\n    Bubbler.calculateBubbleValue = function (particleValue, modeValue, optionsValue, ratio) {\n        if (modeValue > optionsValue) {\n            var size = particleValue + (modeValue - optionsValue) * ratio;\n            return Utils_1.Utils.clamp(size, particleValue, modeValue);\n        }\n        else if (modeValue < optionsValue) {\n            var size = particleValue - (optionsValue - modeValue) * ratio;\n            return Utils_1.Utils.clamp(size, modeValue, particleValue);\n        }\n    };\n    Bubbler.hoverBubbleColor = function (container, particle) {\n        var options = container.options;\n        if (particle.bubble.color === undefined) {\n            var modeColor = options.interactivity.modes.bubble.color;\n            if (modeColor === undefined) {\n                return;\n            }\n            particle.bubble.color = ColorUtils_1.ColorUtils.colorToRgb(modeColor instanceof Array ?\n                Utils_1.Utils.itemFromArray(modeColor) :\n                modeColor);\n        }\n    };\n    return Bubbler;\n}());\nexports.Bubbler = Bubbler;\n"]},"metadata":{},"sourceType":"script"}