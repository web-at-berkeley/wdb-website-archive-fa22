{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ColorUtils_1 = require(\"../../../../Utils/ColorUtils\");\n\nvar Constants_1 = require(\"../../../../Utils/Constants\");\n\nvar Utils_1 = require(\"../../../../Utils/Utils\");\n\nvar Circle_1 = require(\"../../../../Utils/Circle\");\n\nvar Linker = function () {\n  function Linker() {}\n\n  Linker.link = function (p1, container, _delta) {\n    var _a;\n\n    var optOpacity = p1.particlesOptions.lineLinked.opacity;\n    var optDistance = (_a = p1.lineLinkedDistance) !== null && _a !== void 0 ? _a : container.retina.lineLinkedDistance;\n    var pos1 = p1.getPosition();\n    var query = container.particles.quadTree.query(new Circle_1.Circle(pos1.x, pos1.y, optDistance));\n\n    for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n      var p2 = query_1[_i];\n\n      if (p1 === p2 || !p2.particlesOptions.lineLinked.enable) {\n        continue;\n      }\n\n      var pos2 = p2.getPosition();\n      var distance = Utils_1.Utils.getDistance(pos1, pos2);\n      var opacityLine = optOpacity - distance * optOpacity / optDistance;\n\n      if (opacityLine > 0) {\n        if (!container.particles.lineLinkedColor) {\n          var optColor = p1.particlesOptions.lineLinked.color;\n          var color = typeof optColor === \"string\" ? optColor : optColor.value;\n\n          if (color === Constants_1.Constants.randomColorValue) {\n            if (p1.particlesOptions.lineLinked.consent) {\n              container.particles.lineLinkedColor = ColorUtils_1.ColorUtils.colorToRgb({\n                value: color\n              });\n            } else if (p1.particlesOptions.lineLinked.blink) {\n              container.particles.lineLinkedColor = Constants_1.Constants.randomColorValue;\n            } else {\n              container.particles.lineLinkedColor = Constants_1.Constants.midColorValue;\n            }\n          } else {\n            container.particles.lineLinkedColor = ColorUtils_1.ColorUtils.colorToRgb({\n              value: color\n            });\n          }\n        }\n\n        if (p2.links.map(function (t) {\n          return t.destination;\n        }).indexOf(p1) == -1 && p1.links.map(function (t) {\n          return t.destination;\n        }).indexOf(p2) == -1) {\n          p1.links.push({\n            destination: p2,\n            opacity: opacityLine\n          });\n        }\n      }\n    }\n  };\n\n  return Linker;\n}();\n\nexports.Linker = Linker;","map":{"version":3,"sources":["/Users/samarthgoel/Desktop/web-dev-website/node_modules/tsparticles/dist/Core/Particle/Interactions/Particles/Linker.js"],"names":["Object","defineProperty","exports","value","ColorUtils_1","require","Constants_1","Utils_1","Circle_1","Linker","link","p1","container","_delta","_a","optOpacity","particlesOptions","lineLinked","opacity","optDistance","lineLinkedDistance","retina","pos1","getPosition","query","particles","quadTree","Circle","x","y","_i","query_1","length","p2","enable","pos2","distance","Utils","getDistance","opacityLine","lineLinkedColor","optColor","color","Constants","randomColorValue","consent","ColorUtils","colorToRgb","blink","midColorValue","links","map","t","destination","indexOf","push"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ColorUtils_1 = require(\"../../../../Utils/ColorUtils\");\nvar Constants_1 = require(\"../../../../Utils/Constants\");\nvar Utils_1 = require(\"../../../../Utils/Utils\");\nvar Circle_1 = require(\"../../../../Utils/Circle\");\nvar Linker = (function () {\n    function Linker() {\n    }\n    Linker.link = function (p1, container, _delta) {\n        var _a;\n        var optOpacity = p1.particlesOptions.lineLinked.opacity;\n        var optDistance = (_a = p1.lineLinkedDistance) !== null && _a !== void 0 ? _a : container.retina.lineLinkedDistance;\n        var pos1 = p1.getPosition();\n        var query = container.particles.quadTree.query(new Circle_1.Circle(pos1.x, pos1.y, optDistance));\n        for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n            var p2 = query_1[_i];\n            if (p1 === p2 || !p2.particlesOptions.lineLinked.enable) {\n                continue;\n            }\n            var pos2 = p2.getPosition();\n            var distance = Utils_1.Utils.getDistance(pos1, pos2);\n            var opacityLine = optOpacity - (distance * optOpacity) / optDistance;\n            if (opacityLine > 0) {\n                if (!container.particles.lineLinkedColor) {\n                    var optColor = p1.particlesOptions.lineLinked.color;\n                    var color = typeof optColor === \"string\" ? optColor : optColor.value;\n                    if (color === Constants_1.Constants.randomColorValue) {\n                        if (p1.particlesOptions.lineLinked.consent) {\n                            container.particles.lineLinkedColor = ColorUtils_1.ColorUtils.colorToRgb({ value: color });\n                        }\n                        else if (p1.particlesOptions.lineLinked.blink) {\n                            container.particles.lineLinkedColor = Constants_1.Constants.randomColorValue;\n                        }\n                        else {\n                            container.particles.lineLinkedColor = Constants_1.Constants.midColorValue;\n                        }\n                    }\n                    else {\n                        container.particles.lineLinkedColor = ColorUtils_1.ColorUtils.colorToRgb({ value: color });\n                    }\n                }\n                if (p2.links.map(function (t) { return t.destination; }).indexOf(p1) == -1 &&\n                    p1.links.map(function (t) { return t.destination; }).indexOf(p2) == -1) {\n                    p1.links.push({\n                        destination: p2,\n                        opacity: opacityLine,\n                    });\n                }\n            }\n        }\n    };\n    return Linker;\n}());\nexports.Linker = Linker;\n"]},"metadata":{},"sourceType":"script"}