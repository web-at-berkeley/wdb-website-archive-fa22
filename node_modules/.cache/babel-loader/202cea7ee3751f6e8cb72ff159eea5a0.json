{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar PolygonMaskType_1 = require(\"../../Enums/PolygonMaskType\");\n\nvar Particle_1 = require(\"../../Core/Particle\");\n\nvar PolygonMaskInlineArrangement_1 = require(\"../../Enums/PolygonMaskInlineArrangement\");\n\nvar Utils_1 = require(\"../../Utils/Utils\");\n\nvar Constants_1 = require(\"../../Utils/Constants\");\n\nvar ColorUtils_1 = require(\"../../Utils/ColorUtils\");\n\nvar PolygonMask = function () {\n  function PolygonMask(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.paths = [];\n    this.path2DSupported = window.hasOwnProperty(\"Path2D\");\n  }\n\n  PolygonMask.polygonBounce = function (particle) {\n    particle.velocity.horizontal = -particle.velocity.horizontal + particle.velocity.vertical / 2;\n    particle.velocity.vertical = -particle.velocity.vertical + particle.velocity.horizontal / 2;\n  };\n\n  PolygonMask.drawPolygonMask = function (context, rawData, stroke) {\n    var color = typeof stroke.color === \"string\" ? ColorUtils_1.ColorUtils.stringToRgb(stroke.color) : ColorUtils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (color) {\n      context.beginPath();\n      context.moveTo(rawData[0].x, rawData[0].y);\n\n      for (var i = 1; i < rawData.length; i++) {\n        context.lineTo(rawData[i].x, rawData[i].y);\n      }\n\n      context.closePath();\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(color);\n      context.lineWidth = stroke.width;\n      context.stroke();\n    }\n  };\n\n  PolygonMask.drawPolygonMaskPath = function (context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    var color = typeof stroke.color === \"string\" ? ColorUtils_1.ColorUtils.stringToRgb(stroke.color) : ColorUtils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (color) {\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(color, stroke.opacity);\n      context.lineWidth = stroke.width;\n      context.stroke(path);\n    }\n  };\n\n  PolygonMask.prototype.checkInsidePolygon = function (position) {\n    var container = this.container;\n    var options = container.options;\n\n    if (!options.polygon.enable || options.polygon.type === PolygonMaskType_1.PolygonMaskType.none || options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n      return true;\n    }\n\n    if (!this.raw) {\n      throw new Error(Constants_1.Constants.noPolygonFound);\n    }\n\n    var x = position ? position.x : Math.random() * container.canvas.size.width;\n    var y = position ? position.y : Math.random() * container.canvas.size.height;\n    var inside = false;\n\n    for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      var xi = this.raw[i].x;\n      var yi = this.raw[i].y;\n      var xj = this.raw[j].x;\n      var yj = this.raw[j].y;\n      var intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n\n    if (options.polygon.type === PolygonMaskType_1.PolygonMaskType.inside) {\n      return inside;\n    } else if (options.polygon.type === PolygonMaskType_1.PolygonMaskType.outside) {\n      return !inside;\n    }\n\n    return false;\n  };\n\n  PolygonMask.prototype.resize = function () {\n    var _this = this;\n\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none) {\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n\n      this.redrawTimeout = window.setTimeout(function () {\n        _this.parseSvgPathToPolygon().then(function (data) {\n          _this.raw = data;\n\n          _this.createPath2D();\n\n          container.particles.redraw();\n        });\n      }, 250);\n    }\n  };\n\n  PolygonMask.prototype.startAsync = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var container, options, _a;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            container = this.container;\n            options = container.options;\n            if (!(options.polygon.enable && options.polygon.url)) return [3, 2];\n            _a = this;\n            return [4, this.parseSvgPathToPolygon(options.polygon.url)];\n\n          case 1:\n            _a.raw = _b.sent();\n            this.createPath2D();\n            _b.label = 2;\n\n          case 2:\n            return [2];\n        }\n      });\n    });\n  };\n\n  PolygonMask.prototype.stop = function () {\n    delete this.raw;\n    this.paths = [];\n    delete this.svg;\n  };\n\n  PolygonMask.prototype.randomPointInPolygon = function () {\n    var container = this.container;\n    var options = container.options;\n    var position;\n\n    if (options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n      switch (options.polygon.inline.arrangement) {\n        case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.randomPoint:\n          position = this.getRandomPointOnPolygonPath();\n          break;\n\n        case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.randomLength:\n          position = this.getRandomPointOnPolygonPathByLength();\n          break;\n\n        case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.equidistant:\n          position = this.getEquidistantPointOnPolygonPathByIndex(container.particles.count);\n          break;\n\n        case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.onePerPoint:\n        case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.perPoint:\n        default:\n          position = this.getPointOnPolygonPathByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPointInPolygon();\n    }\n  };\n\n  PolygonMask.prototype.particlesInitialization = function () {\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline && (options.polygon.inline.arrangement === PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.onePerPoint || options.polygon.inline.arrangement === PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.perPoint)) {\n      this.drawPointsOnPolygonPath();\n      return true;\n    }\n\n    return false;\n  };\n\n  PolygonMask.prototype.particlePosition = function (position) {\n    var _a, _b;\n\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0) {\n      var pos = {\n        x: 0,\n        y: 0\n      };\n\n      if (position) {\n        pos.x = position.x;\n        pos.y = position.y;\n      } else {\n        var randomPoint = this.randomPointInPolygon();\n        pos.x = randomPoint.x;\n        pos.y = randomPoint.y;\n      }\n\n      return pos;\n    }\n  };\n\n  PolygonMask.prototype.particleBounce = function (particle, _delta) {\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.inline) {\n      if (!this.checkInsidePolygon(particle.position)) {\n        PolygonMask.polygonBounce(particle);\n        return true;\n      }\n    } else if (options.polygon.enable && options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n      if (particle.initialPosition) {\n        var dist = Utils_1.Utils.getDistance(particle.initialPosition, particle.position);\n\n        if (dist > container.retina.polygonMaskMoveRadius) {\n          PolygonMask.polygonBounce(particle);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  PolygonMask.prototype.clickPositionValid = function (position) {\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.inline) {\n      if (this.checkInsidePolygon(position)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  PolygonMask.prototype.parseSvgPathToPolygon = function (svgUrl) {\n    var _a;\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var container, options, url, req, xml, parser, doc, svgPaths, i, path, pxRatio, scale, position, polygonRaw, _i, _b, path, len, p, i, segment, absSeg, relSeg;\n\n      return tslib_1.__generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            container = this.container;\n            options = container.options;\n            url = svgUrl || options.polygon.url;\n            if (!(!this.paths.length || !this.svg)) return [3, 4];\n            return [4, fetch(url)];\n\n          case 1:\n            req = _c.sent();\n            if (!req.ok) return [3, 3];\n            return [4, req.text()];\n\n          case 2:\n            xml = _c.sent();\n            parser = new DOMParser();\n            doc = parser.parseFromString(xml, \"image/svg+xml\");\n            this.svg = doc.getElementsByTagName(\"svg\")[0];\n            svgPaths = doc.getElementsByTagName(\"path\");\n\n            for (i = 0; i < svgPaths.length; i++) {\n              path = svgPaths.item(i);\n\n              if (path) {\n                this.paths.push({\n                  element: path,\n                  length: path.getTotalLength()\n                });\n              }\n            }\n\n            return [3, 4];\n\n          case 3:\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n\n          case 4:\n            pxRatio = container.retina.pixelRatio;\n            scale = options.polygon.scale / pxRatio;\n            this.dimension.width = parseFloat(this.svg.getAttribute(\"width\") || \"0\") * scale;\n            this.dimension.height = parseFloat(this.svg.getAttribute(\"height\") || \"0\") * scale;\n            position = (_a = options.polygon.position) !== null && _a !== void 0 ? _a : {\n              x: 50,\n              y: 50\n            };\n            this.offset = {\n              x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n              y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n            };\n            polygonRaw = [];\n\n            for (_i = 0, _b = this.paths; _i < _b.length; _i++) {\n              path = _b[_i];\n              len = path.element.pathSegList.numberOfItems;\n              p = {\n                x: 0,\n                y: 0\n              };\n\n              for (i = 0; i < len; i++) {\n                segment = path.element.pathSegList.getItem(i);\n\n                switch (segment.pathSegType) {\n                  case window.SVGPathSeg.PATHSEG_MOVETO_ABS:\n                  case window.SVGPathSeg.PATHSEG_LINETO_ABS:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                  case window.SVGPathSeg.PATHSEG_ARC_ABS:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n                    absSeg = segment;\n                    p.x = absSeg.x;\n                    p.y = absSeg.y;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                    p.x = segment.x;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                    p.y = segment.y;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_LINETO_REL:\n                  case window.SVGPathSeg.PATHSEG_MOVETO_REL:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                  case window.SVGPathSeg.PATHSEG_ARC_REL:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                  case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n                    relSeg = segment;\n                    p.x += relSeg.x;\n                    p.y += relSeg.y;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                    p.x += segment.x;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                    p.y += segment.y;\n                    break;\n\n                  case window.SVGPathSeg.PATHSEG_UNKNOWN:\n                  case window.SVGPathSeg.PATHSEG_CLOSEPATH:\n                    continue;\n                }\n\n                polygonRaw.push({\n                  x: p.x * scale + this.offset.x,\n                  y: p.y * scale + this.offset.y\n                });\n              }\n            }\n\n            return [2, polygonRaw];\n        }\n      });\n    });\n  };\n\n  PolygonMask.prototype.draw = function (context) {\n    var container = this.container;\n    var options = container.options;\n\n    if (options.polygon.enable && options.polygon.draw.enable) {\n      var container_1 = this.container;\n      var options_1 = container_1.options;\n      var polygonDraw = options_1.polygon.draw;\n      var rawData = this.raw;\n\n      for (var _i = 0, _a = this.paths; _i < _a.length; _i++) {\n        var path = _a[_i];\n        var path2d = path.path2d;\n        var path2dSupported = this.path2DSupported;\n\n        if (context) {\n          if (path2dSupported && path2d && this.offset) {\n            PolygonMask.drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            PolygonMask.drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      }\n    }\n  };\n\n  PolygonMask.prototype.drawPointsOnPolygonPath = function () {\n    var container = this.container;\n\n    if (this.raw) {\n      for (var _i = 0, _a = this.raw; _i < _a.length; _i++) {\n        var item = _a[_i];\n        var position = {\n          x: item.x,\n          y: item.y\n        };\n        container.particles.addParticle(new Particle_1.Particle(container, position));\n      }\n    }\n  };\n\n  PolygonMask.prototype.getRandomPointOnPolygonPath = function () {\n    if (!this.raw || !this.raw.length) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    var coords = Utils_1.Utils.itemFromArray(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  };\n\n  PolygonMask.prototype.getRandomPointOnPolygonPathByLength = function () {\n    var _a, _b;\n\n    var container = this.container;\n    var options = container.options;\n    if (!this.raw || !this.raw.length || !this.paths.length) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    var path = Utils_1.Utils.itemFromArray(this.paths);\n    var distance = Math.floor(Math.random() * path.length) + 1;\n    var point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.polygon.scale + (((_a = this.offset) === null || _a === void 0 ? void 0 : _a.x) || 0),\n      y: point.y * options.polygon.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.y) || 0)\n    };\n  };\n\n  PolygonMask.prototype.getEquidistantPointOnPolygonPathByIndex = function (index) {\n    var _a, _b, _c, _d, _e, _f;\n\n    var container = this.container;\n    var options = container.options;\n    if (!this.raw || !this.raw.length || !this.paths.length) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    var offset = 0;\n    var point;\n    var totalLength = this.paths.reduce(function (tot, path) {\n      return tot + path.length;\n    }, 0);\n    var distance = totalLength / options.particles.number.value;\n\n    for (var _i = 0, _g = this.paths; _i < _g.length; _i++) {\n      var path = _g[_i];\n      var pathDistance = distance * index - offset;\n\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n\n    return {\n      x: ((_a = point === null || point === void 0 ? void 0 : point.x) !== null && _a !== void 0 ? _a : 0) * options.polygon.scale + ((_c = (_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) !== null && _c !== void 0 ? _c : 0),\n      y: ((_d = point === null || point === void 0 ? void 0 : point.y) !== null && _d !== void 0 ? _d : 0) * options.polygon.scale + ((_f = (_e = this.offset) === null || _e === void 0 ? void 0 : _e.y) !== null && _f !== void 0 ? _f : 0)\n    };\n  };\n\n  PolygonMask.prototype.getPointOnPolygonPathByIndex = function (index) {\n    if (!this.raw || !this.raw.length) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    var coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  };\n\n  PolygonMask.prototype.createPath2D = function () {\n    var _a;\n\n    if (!this.path2DSupported) {\n      return;\n    }\n\n    var _loop_1 = function (path) {\n      var pathData = (_a = path.element) === null || _a === void 0 ? void 0 : _a.getAttribute(\"d\");\n\n      if (pathData) {\n        var path2d = new Path2D(pathData);\n        var matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n        var finalPath = new Path2D();\n        var transform = matrix.scale(this_1.container.options.polygon.scale);\n\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n\n      if (!path.path2d && this_1.raw) {\n        path.path2d = new Path2D();\n        path.path2d.moveTo(this_1.raw[0].x, this_1.raw[0].y);\n        this_1.raw.forEach(function (pos, i) {\n          var _a;\n\n          if (i > 0) {\n            (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n          }\n        });\n        path.path2d.closePath();\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _b = this.paths; _i < _b.length; _i++) {\n      var path = _b[_i];\n\n      _loop_1(path);\n    }\n  };\n\n  return PolygonMask;\n}();\n\nexports.PolygonMask = PolygonMask;","map":{"version":3,"sources":["/Users/samarthgoel/Desktop/web-dev-website/node_modules/tsparticles/dist/Plugins/PolygonMask/PolygonMask.js"],"names":["Object","defineProperty","exports","value","tslib_1","require","PolygonMaskType_1","Particle_1","PolygonMaskInlineArrangement_1","Utils_1","Constants_1","ColorUtils_1","PolygonMask","container","dimension","height","width","paths","path2DSupported","window","hasOwnProperty","polygonBounce","particle","velocity","horizontal","vertical","drawPolygonMask","context","rawData","stroke","color","ColorUtils","stringToRgb","colorToRgb","beginPath","moveTo","x","y","i","length","lineTo","closePath","strokeStyle","getStyleFromColor","lineWidth","drawPolygonMaskPath","path","position","translate","opacity","prototype","checkInsidePolygon","options","polygon","enable","type","PolygonMaskType","none","inline","raw","Error","Constants","noPolygonFound","Math","random","canvas","size","inside","j","xi","yi","xj","yj","intersect","outside","resize","_this","redrawTimeout","clearTimeout","setTimeout","parseSvgPathToPolygon","then","data","createPath2D","particles","redraw","startAsync","__awaiter","_a","__generator","_b","label","url","sent","stop","svg","randomPointInPolygon","arrangement","PolygonMaskInlineArrangement","randomPoint","getRandomPointOnPolygonPath","randomLength","getRandomPointOnPolygonPathByLength","equidistant","getEquidistantPointOnPolygonPathByIndex","count","onePerPoint","perPoint","getPointOnPolygonPathByIndex","particlesInitialization","drawPointsOnPolygonPath","particlePosition","pos","particleBounce","_delta","initialPosition","dist","Utils","getDistance","retina","polygonMaskMoveRadius","clickPositionValid","svgUrl","req","xml","parser","doc","svgPaths","pxRatio","scale","polygonRaw","_i","len","p","segment","absSeg","relSeg","_c","fetch","ok","text","DOMParser","parseFromString","getElementsByTagName","item","push","element","getTotalLength","pixelRatio","parseFloat","getAttribute","offset","pathSegList","numberOfItems","getItem","pathSegType","SVGPathSeg","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","draw","container_1","options_1","polygonDraw","path2d","path2dSupported","addParticle","Particle","noPolygonDataLoaded","coords","itemFromArray","distance","floor","point","getPointAtLength","index","_d","_e","_f","totalLength","reduce","tot","number","_g","pathDistance","_loop_1","pathData","Path2D","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","this_1","addPath","forEach"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar PolygonMaskType_1 = require(\"../../Enums/PolygonMaskType\");\nvar Particle_1 = require(\"../../Core/Particle\");\nvar PolygonMaskInlineArrangement_1 = require(\"../../Enums/PolygonMaskInlineArrangement\");\nvar Utils_1 = require(\"../../Utils/Utils\");\nvar Constants_1 = require(\"../../Utils/Constants\");\nvar ColorUtils_1 = require(\"../../Utils/ColorUtils\");\nvar PolygonMask = (function () {\n    function PolygonMask(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.paths = [];\n        this.path2DSupported = window.hasOwnProperty(\"Path2D\");\n    }\n    PolygonMask.polygonBounce = function (particle) {\n        particle.velocity.horizontal = -particle.velocity.horizontal + (particle.velocity.vertical / 2);\n        particle.velocity.vertical = -particle.velocity.vertical + (particle.velocity.horizontal / 2);\n    };\n    PolygonMask.drawPolygonMask = function (context, rawData, stroke) {\n        var color = typeof stroke.color === \"string\" ?\n            ColorUtils_1.ColorUtils.stringToRgb(stroke.color) :\n            ColorUtils_1.ColorUtils.colorToRgb(stroke.color);\n        if (color) {\n            context.beginPath();\n            context.moveTo(rawData[0].x, rawData[0].y);\n            for (var i = 1; i < rawData.length; i++) {\n                context.lineTo(rawData[i].x, rawData[i].y);\n            }\n            context.closePath();\n            context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(color);\n            context.lineWidth = stroke.width;\n            context.stroke();\n        }\n    };\n    PolygonMask.drawPolygonMaskPath = function (context, path, stroke, position) {\n        context.translate(position.x, position.y);\n        var color = typeof stroke.color === \"string\" ?\n            ColorUtils_1.ColorUtils.stringToRgb(stroke.color) :\n            ColorUtils_1.ColorUtils.colorToRgb(stroke.color);\n        if (color) {\n            context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(color, stroke.opacity);\n            context.lineWidth = stroke.width;\n            context.stroke(path);\n        }\n    };\n    PolygonMask.prototype.checkInsidePolygon = function (position) {\n        var container = this.container;\n        var options = container.options;\n        if (!options.polygon.enable ||\n            options.polygon.type === PolygonMaskType_1.PolygonMaskType.none ||\n            options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Constants_1.Constants.noPolygonFound);\n        }\n        var x = position ? position.x : Math.random() * container.canvas.size.width;\n        var y = position ? position.y : Math.random() * container.canvas.size.height;\n        var inside = false;\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            var xi = this.raw[i].x;\n            var yi = this.raw[i].y;\n            var xj = this.raw[j].x;\n            var yj = this.raw[j].y;\n            var intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        if (options.polygon.type === PolygonMaskType_1.PolygonMaskType.inside) {\n            return inside;\n        }\n        else if (options.polygon.type === PolygonMaskType_1.PolygonMaskType.outside) {\n            return !inside;\n        }\n        return false;\n    };\n    PolygonMask.prototype.resize = function () {\n        var _this = this;\n        var container = this.container;\n        var options = container.options;\n        if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none) {\n            if (this.redrawTimeout) {\n                clearTimeout(this.redrawTimeout);\n            }\n            this.redrawTimeout = window.setTimeout(function () {\n                _this.parseSvgPathToPolygon().then(function (data) {\n                    _this.raw = data;\n                    _this.createPath2D();\n                    container.particles.redraw();\n                });\n            }, 250);\n        }\n    };\n    PolygonMask.prototype.startAsync = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var container, options, _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        container = this.container;\n                        options = container.options;\n                        if (!(options.polygon.enable && options.polygon.url)) return [3, 2];\n                        _a = this;\n                        return [4, this.parseSvgPathToPolygon(options.polygon.url)];\n                    case 1:\n                        _a.raw = _b.sent();\n                        this.createPath2D();\n                        _b.label = 2;\n                    case 2: return [2];\n                }\n            });\n        });\n    };\n    PolygonMask.prototype.stop = function () {\n        delete this.raw;\n        this.paths = [];\n        delete this.svg;\n    };\n    PolygonMask.prototype.randomPointInPolygon = function () {\n        var container = this.container;\n        var options = container.options;\n        var position;\n        if (options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n            switch (options.polygon.inline.arrangement) {\n                case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.randomPoint:\n                    position = this.getRandomPointOnPolygonPath();\n                    break;\n                case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.randomLength:\n                    position = this.getRandomPointOnPolygonPathByLength();\n                    break;\n                case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.equidistant:\n                    position = this.getEquidistantPointOnPolygonPathByIndex(container.particles.count);\n                    break;\n                case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.onePerPoint:\n                case PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.perPoint:\n                default:\n                    position = this.getPointOnPolygonPathByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPointInPolygon();\n        }\n    };\n    PolygonMask.prototype.particlesInitialization = function () {\n        var container = this.container;\n        var options = container.options;\n        if (options.polygon.enable && options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline &&\n            (options.polygon.inline.arrangement === PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.onePerPoint ||\n                options.polygon.inline.arrangement === PolygonMaskInlineArrangement_1.PolygonMaskInlineArrangement.perPoint)) {\n            this.drawPointsOnPolygonPath();\n            return true;\n        }\n        return false;\n    };\n    PolygonMask.prototype.particlePosition = function (position) {\n        var _a, _b;\n        var container = this.container;\n        var options = container.options;\n        if (options.polygon.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0) {\n            var pos = { x: 0, y: 0 };\n            if (position) {\n                pos.x = position.x;\n                pos.y = position.y;\n            }\n            else {\n                var randomPoint = this.randomPointInPolygon();\n                pos.x = randomPoint.x;\n                pos.y = randomPoint.y;\n            }\n            return pos;\n        }\n    };\n    PolygonMask.prototype.particleBounce = function (particle, _delta) {\n        var container = this.container;\n        var options = container.options;\n        if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none &&\n            options.polygon.type !== PolygonMaskType_1.PolygonMaskType.inline) {\n            if (!this.checkInsidePolygon(particle.position)) {\n                PolygonMask.polygonBounce(particle);\n                return true;\n            }\n        }\n        else if (options.polygon.enable && options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n            if (particle.initialPosition) {\n                var dist = Utils_1.Utils.getDistance(particle.initialPosition, particle.position);\n                if (dist > container.retina.polygonMaskMoveRadius) {\n                    PolygonMask.polygonBounce(particle);\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    PolygonMask.prototype.clickPositionValid = function (position) {\n        var container = this.container;\n        var options = container.options;\n        if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none &&\n            options.polygon.type !== PolygonMaskType_1.PolygonMaskType.inline) {\n            if (this.checkInsidePolygon(position)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    PolygonMask.prototype.parseSvgPathToPolygon = function (svgUrl) {\n        var _a;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var container, options, url, req, xml, parser, doc, svgPaths, i, path, pxRatio, scale, position, polygonRaw, _i, _b, path, len, p, i, segment, absSeg, relSeg;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        container = this.container;\n                        options = container.options;\n                        url = svgUrl || options.polygon.url;\n                        if (!(!this.paths.length || !this.svg)) return [3, 4];\n                        return [4, fetch(url)];\n                    case 1:\n                        req = _c.sent();\n                        if (!req.ok) return [3, 3];\n                        return [4, req.text()];\n                    case 2:\n                        xml = _c.sent();\n                        parser = new DOMParser();\n                        doc = parser.parseFromString(xml, \"image/svg+xml\");\n                        this.svg = doc.getElementsByTagName(\"svg\")[0];\n                        svgPaths = doc.getElementsByTagName(\"path\");\n                        for (i = 0; i < svgPaths.length; i++) {\n                            path = svgPaths.item(i);\n                            if (path) {\n                                this.paths.push({\n                                    element: path,\n                                    length: path.getTotalLength(),\n                                });\n                            }\n                        }\n                        return [3, 4];\n                    case 3: throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n                    case 4:\n                        pxRatio = container.retina.pixelRatio;\n                        scale = options.polygon.scale / pxRatio;\n                        this.dimension.width = parseFloat(this.svg.getAttribute(\"width\") || \"0\") * scale;\n                        this.dimension.height = parseFloat(this.svg.getAttribute(\"height\") || \"0\") * scale;\n                        position = (_a = options.polygon.position) !== null && _a !== void 0 ? _a : {\n                            x: 50,\n                            y: 50,\n                        };\n                        this.offset = {\n                            x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n                            y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2,\n                        };\n                        polygonRaw = [];\n                        for (_i = 0, _b = this.paths; _i < _b.length; _i++) {\n                            path = _b[_i];\n                            len = path.element.pathSegList.numberOfItems;\n                            p = {\n                                x: 0,\n                                y: 0,\n                            };\n                            for (i = 0; i < len; i++) {\n                                segment = path.element.pathSegList.getItem(i);\n                                switch (segment.pathSegType) {\n                                    case window.SVGPathSeg.PATHSEG_MOVETO_ABS:\n                                    case window.SVGPathSeg.PATHSEG_LINETO_ABS:\n                                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                                    case window.SVGPathSeg.PATHSEG_ARC_ABS:\n                                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n                                        absSeg = segment;\n                                        p.x = absSeg.x;\n                                        p.y = absSeg.y;\n                                        break;\n                                    case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                                        p.x = segment.x;\n                                        break;\n                                    case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                                        p.y = segment.y;\n                                        break;\n                                    case window.SVGPathSeg.PATHSEG_LINETO_REL:\n                                    case window.SVGPathSeg.PATHSEG_MOVETO_REL:\n                                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                                    case window.SVGPathSeg.PATHSEG_ARC_REL:\n                                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n                                        relSeg = segment;\n                                        p.x += relSeg.x;\n                                        p.y += relSeg.y;\n                                        break;\n                                    case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                                        p.x += segment.x;\n                                        break;\n                                    case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                                        p.y += segment.y;\n                                        break;\n                                    case window.SVGPathSeg.PATHSEG_UNKNOWN:\n                                    case window.SVGPathSeg.PATHSEG_CLOSEPATH:\n                                        continue;\n                                }\n                                polygonRaw.push({\n                                    x: p.x * scale + this.offset.x,\n                                    y: p.y * scale + this.offset.y,\n                                });\n                            }\n                        }\n                        return [2, polygonRaw];\n                }\n            });\n        });\n    };\n    PolygonMask.prototype.draw = function (context) {\n        var container = this.container;\n        var options = container.options;\n        if (options.polygon.enable && options.polygon.draw.enable) {\n            var container_1 = this.container;\n            var options_1 = container_1.options;\n            var polygonDraw = options_1.polygon.draw;\n            var rawData = this.raw;\n            for (var _i = 0, _a = this.paths; _i < _a.length; _i++) {\n                var path = _a[_i];\n                var path2d = path.path2d;\n                var path2dSupported = this.path2DSupported;\n                if (context) {\n                    if (path2dSupported && path2d && this.offset) {\n                        PolygonMask.drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n                    }\n                    else if (rawData) {\n                        PolygonMask.drawPolygonMask(context, rawData, polygonDraw.stroke);\n                    }\n                }\n            }\n        }\n    };\n    PolygonMask.prototype.drawPointsOnPolygonPath = function () {\n        var container = this.container;\n        if (this.raw) {\n            for (var _i = 0, _a = this.raw; _i < _a.length; _i++) {\n                var item = _a[_i];\n                var position = {\n                    x: item.x,\n                    y: item.y,\n                };\n                container.particles.addParticle(new Particle_1.Particle(container, position));\n            }\n        }\n    };\n    PolygonMask.prototype.getRandomPointOnPolygonPath = function () {\n        if (!this.raw || !this.raw.length)\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        var coords = Utils_1.Utils.itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    };\n    PolygonMask.prototype.getRandomPointOnPolygonPathByLength = function () {\n        var _a, _b;\n        var container = this.container;\n        var options = container.options;\n        if (!this.raw || !this.raw.length || !this.paths.length)\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        var path = Utils_1.Utils.itemFromArray(this.paths);\n        var distance = Math.floor(Math.random() * path.length) + 1;\n        var point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.polygon.scale + (((_a = this.offset) === null || _a === void 0 ? void 0 : _a.x) || 0),\n            y: point.y * options.polygon.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.y) || 0),\n        };\n    };\n    PolygonMask.prototype.getEquidistantPointOnPolygonPathByIndex = function (index) {\n        var _a, _b, _c, _d, _e, _f;\n        var container = this.container;\n        var options = container.options;\n        if (!this.raw || !this.raw.length || !this.paths.length)\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        var offset = 0;\n        var point;\n        var totalLength = this.paths.reduce(function (tot, path) { return tot + path.length; }, 0);\n        var distance = totalLength / options.particles.number.value;\n        for (var _i = 0, _g = this.paths; _i < _g.length; _i++) {\n            var path = _g[_i];\n            var pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_a = point === null || point === void 0 ? void 0 : point.x) !== null && _a !== void 0 ? _a : 0) * options.polygon.scale + ((_c = (_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) !== null && _c !== void 0 ? _c : 0),\n            y: ((_d = point === null || point === void 0 ? void 0 : point.y) !== null && _d !== void 0 ? _d : 0) * options.polygon.scale + ((_f = (_e = this.offset) === null || _e === void 0 ? void 0 : _e.y) !== null && _f !== void 0 ? _f : 0),\n        };\n    };\n    PolygonMask.prototype.getPointOnPolygonPathByIndex = function (index) {\n        if (!this.raw || !this.raw.length)\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        var coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    };\n    PolygonMask.prototype.createPath2D = function () {\n        var _a;\n        if (!this.path2DSupported) {\n            return;\n        }\n        var _loop_1 = function (path) {\n            var pathData = (_a = path.element) === null || _a === void 0 ? void 0 : _a.getAttribute(\"d\");\n            if (pathData) {\n                var path2d = new Path2D(pathData);\n                var matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                var finalPath = new Path2D();\n                var transform = matrix.scale(this_1.container.options.polygon.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (!path.path2d && this_1.raw) {\n                path.path2d = new Path2D();\n                path.path2d.moveTo(this_1.raw[0].x, this_1.raw[0].y);\n                this_1.raw.forEach(function (pos, i) {\n                    var _a;\n                    if (i > 0) {\n                        (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                    }\n                });\n                path.path2d.closePath();\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _b = this.paths; _i < _b.length; _i++) {\n            var path = _b[_i];\n            _loop_1(path);\n        }\n    };\n    return PolygonMask;\n}());\nexports.PolygonMask = PolygonMask;\n"]},"metadata":{},"sourceType":"script"}